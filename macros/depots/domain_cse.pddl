; Generated by PTT
(define (domain Depot)
(:requirements :typing :equality)
(:types place locatable - object
 depot distributor - place
 truck hoist surface - locatable
 pallet crate - surface
)
(:predicates (at ?x - locatable ?y - place)
(on ?x - crate ?y - surface)
(in ?x - crate ?y - truck)
(lifting ?x - hoist ?y - crate)
(available ?x - hoist)
(clear ?x - surface)
(stai_at ?y - crate ?p - place)
(stai_on ?y - crate ?z - surface)
(stag_on ?y - crate ?zx4 - surface)
)
(:action Drive
:parameters ( ?x - truck ?y - place ?z - place)
:precondition (and (at ?x ?y))
:effect (and (not (at ?x ?y))(at ?x ?z))
)
(:action Lift
:parameters ( ?x - hoist ?y - crate ?z - surface ?p - place)
:precondition (and (at ?x ?p)(available ?x)(at ?y ?p)(on ?y ?z)(clear ?y))
:effect (and (not (at ?y ?p))(lifting ?x ?y)(not (clear ?y))(not (available ?x))(clear ?z)(not (on ?y ?z)))
)
(:action Drop
:parameters ( ?x - hoist ?y - crate ?z - surface ?p - place)
:precondition (and (at ?x ?p)(at ?z ?p)(clear ?z)(lifting ?x ?y))
:effect (and (available ?x)(not (lifting ?x ?y))(at ?y ?p)(not (clear ?z))(clear ?y)(on ?y ?z))
)
(:action Load
:parameters ( ?x - hoist ?y - crate ?z - truck ?p - place)
:precondition (and (at ?x ?p)(at ?z ?p)(lifting ?x ?y))
:effect (and (not (lifting ?x ?y))(in ?y ?z)(available ?x))
)
(:action Unload
:parameters ( ?x - hoist ?y - crate ?z - truck ?p - place)
:precondition (and (at ?x ?p)(at ?z ?p)(available ?x)(in ?y ?z))
:effect (and (not (in ?y ?z))(not (available ?x))(lifting ?x ?y))
)
(:action Lift_mcr_Load
:parameters ( ?x - hoist ?y - crate ?z - surface ?p - place ?zx4 - truck)
:precondition (and (at ?x ?p)(available ?x)(at ?y ?p)(on ?y ?z)(clear ?y)(at ?zx4 ?p)(stai_at ?y ?p)(stai_on ?y ?z)(not (= ?y ?zx4)))
:effect (and (clear ?z)(in ?y ?zx4)(available ?x)(not (at ?y ?p))(not (clear ?y))(not (on ?y ?z))(not (lifting ?x ?y)))
)
(:action Unload_mcr_Drop
:parameters ( ?x - hoist ?y - crate ?z - truck ?p - place ?zx4 - surface)
:precondition (and (at ?x ?p)(at ?z ?p)(available ?x)(in ?y ?z)(at ?zx4 ?p)(clear ?zx4)(stag_on ?y ?zx4)(not (= ?z ?zx4)))
:effect (and (available ?x)(at ?y ?p)(clear ?y)(on ?y ?zx4)(not (in ?y ?z))(not (lifting ?x ?y))(not (clear ?zx4)))
)
)